package tr.com.vbt.cobol.convert;

import java.io.FileNotFoundException;

import tr.com.vbt.cobol.parser.AbstractCommand;
import tr.com.vbt.java.jsp.general.JSPGeneral;
import tr.com.vbt.java.util.RuleNotFoundException;
import tr.com.vbt.lexer.AbstractLexing;
import tr.com.vbt.lexer.NaturalLexing;
import tr.com.vbt.natural.parser.general.ElementNaturalProgram;
import tr.com.vbt.patern.CommandList;
import tr.com.vbt.patern.NaturalCommandList;
import tr.com.vbt.token.AbstractToken;
import tr.com.vbt.token.TokenTipi;
import tr.com.vbt.util.Configuration;

public class TransferFromNaturalToJSP {
	
	ConversionOperationLogger conversionLogger=new ConversionOperationLogger();
	/**
	 * @param args
	 * @throws FileNotFoundException 
	 */
	public static void main(String[] args) throws FileNotFoundException {
		
		ConversionLogModel logModel=new ConversionLogModel();
		
		logModel.setUser(args[0]);
		logModel.setFileName(args[1]);
		logModel.setFolderPath(Configuration.getFolderPath());
		
		TransferFromNaturalToJSP transferDriver=new TransferFromNaturalToJSP(); 
		
		transferDriver.driveTransfer(logModel);
	}
	
	
	

	private void driveTransfer(ConversionLogModel logModel) throws FileNotFoundException {
		
		StringBuilder sb = null;
		
		logModel.setPhase(Phase.START);
		conversionLogger.logConversion(logModel);
		
		AbstractLexing lexer =new NaturalLexing();
		CommandList commandList;
		ElementNaturalProgram ep;
		JSPGeneral javaTreeElement = null;
		
		//********************************************************************************************
		{
			
			//1 Tokenize Source File
			lexer.tokenizeSourceFile(logModel.getFullNaturalInputFileName());
			
			//1.1 Alter Midlines
			//TODO: open below code
			//alterMidLinesToSubLines(lexer);

			//1.2 Export Tokenized Source File
			sb=lexer.exportLexedData(logModel.getFullTokenizeFileName()); // lex uzantılı dosyayı yaz.
			
			logModel.setPhase(Phase.TOKENIZE);
			logModel.setOutput(sb);
			conversionLogger.logConversion(logModel);
			
		}
		
		//********************************************************************************************
		{
			//2 Parse tokens To Command List
			 commandList=NaturalCommandList.getInstance(lexer.tokenListesi);
			try {
				commandList.parseTokensToCommandsList();
			} catch (Exception e1) {
				e1.printStackTrace();
				return ;
			}
			
			
			sb=commandList.writeCommands(logModel.getFullCommandFileName(), logModel.getFullUndefinedCommandFileName());
			
						
			commandList.findAndSetDataTypeDefinitions();
			
			commandList.addVirtualEndings();
			
			sb=commandList.writeCommands(logModel.getFullCommandFileName());
		
			
			//2.1 Find And Set Endings
			commandList.findAndSetEndingCommands();
			
			//2.2 Write Commands
			sb=commandList.writeCommands(logModel.getFullCommandFileNamewithEndings());
			
			//2.3 Tüm komutlara command Listesini set Et
			for (AbstractCommand command: commandList.getCommandList()) {
				command.setCommandListesi(commandList.getCommandList());
			}
			
			logModel.setPhase(Phase.PARSE_TO_COMMANDS);
			logModel.setOutput(sb);
			conversionLogger.logConversion(logModel);
			
		}
		//********************************************************************************************
				
		
		
		//********************************************************************************************
		{
			//3 Token Dizisini Abstract NAtural Ağacına Çevir.
			ep=new ElementNaturalProgram(commandList.getCommandList());
			ep.parseBaslat();
			
			//3.1 Abstract NAtural Ağacını Yazdır.
			sb=ep.exportBaslat(logModel.getFullSourceTreeFileName());
			
			logModel.setPhase(Phase.PARSE_TO_SOURCE_TREE);
			logModel.setOutput(sb);
			conversionLogger.logConversion(logModel);
		
		}
		//********************************************************************************************
		
		
		//********************************************************************************************
		{
			//4 Natural Ağacından Java ağacını oluştur.
			
			try {
				if( ep.startGenerateTree()){
					javaTreeElement=(JSPGeneral)JSPGeneral.getInstance(); //Oluşan java sınıfını dön.
					//4.1 Soyut Java Ağacını XML dosyaya yaz.
					sb=javaTreeElement.exportJavaTreeBaslat(logModel.getFullJSPTreeFileName());
					
					logModel.setPhase(Phase.CONVERT_NATURAL_TREE_TO_JSP_TREE);
					logModel.setOutput(sb);
					conversionLogger.logConversion(logModel);
				}
			} catch (RuleNotFoundException e) {
				System.out.println("Rule Not Found For:"+e.getCobolDetailedName());
				e.printStackTrace();
			}
			
			
		}
		//********************************************************************************************
		
		
		//********************************************************************************************
				{
					//5 JAva Ağacından Java kodunu oluştur.
					sb=javaTreeElement.writeJavaBaslat(logModel.getFullJSPFileName());
							
					logModel.setPhase(Phase.WRITE_JSP_CODE);
					logModel.setOutput(sb);
					conversionLogger.logConversion(logModel);
					
				}
				//********************************************************************************************
		
		
	}

	private void alterMidLinesToSubLines(AbstractLexing lexer) {
		for (AbstractToken token : lexer.tokenListesi) {
			
			if(token.getTip().equals(TokenTipi.Kelime)){
				token.setDeger(((String)token.getDeger()).replaceAll("-", "_"));
				System.out.println(token.getDeger());
				System.out.println();
			}
		}
		
	}

	

	

}
